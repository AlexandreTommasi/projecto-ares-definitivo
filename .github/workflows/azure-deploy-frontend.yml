name: Deploy Frontend to Azure Web App

on:
  workflow_dispatch:
  # Push trigger comentado para evitar deploy automático no primeiro commit
  # Descomente as linhas abaixo se quiser deploy automático em futuros pushes:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Create environment files
        working-directory: ./frontend
        run: |
          # Create .env.production for build time
          echo "NEXT_PUBLIC_API_URL=https://expandev-01.azurewebsites.net" > .env.production
          echo "NODE_ENV=production" >> .env.production
          
          # Create .env.local for runtime (Azure)
          echo "NEXT_PUBLIC_API_URL=https://expandev-01.azurewebsites.net" > .env.local
          
          # Update next.config if exists to use standalone mode
          if [ -f "next.config.js" ]; then
            if ! grep -q "output.*:.*standalone" next.config.js; then
              sed -i "s/module.exports = {/module.exports = {\n  output: 'standalone',/" next.config.js
            fi
          elif [ -f "next.config.mjs" ]; then
            if ! grep -q "output.*:.*standalone" next.config.mjs; then
              sed -i "s/const nextConfig = {/const nextConfig = {\n  output: 'standalone',/" next.config.mjs
            fi
          fi

      - name: npm install, build, and test
        working-directory: ./frontend
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present -- --passWithNoTests || true

      - name: Prepare deployment package
        run: |
          mkdir -p deployment
          
          # Check if it's a standalone Next.js build
          if [ -d "frontend/.next/standalone" ]; then
            echo "Using Next.js standalone build"
            cp -r frontend/.next/standalone/* deployment/
            # Copy static assets
            mkdir -p deployment/.next
            cp -r frontend/.next/static deployment/.next/ 2>/dev/null || true
            cp -r frontend/public deployment/ 2>/dev/null || true
            # Copy node_modules from standalone
            if [ ! -d "deployment/node_modules" ]; then
              cp -r frontend/node_modules deployment/ 2>/dev/null || true
            fi
          else
            echo "Using standard Next.js build - copying all necessary files"
            # Copy all build artifacts
            cp -r frontend/.next deployment/
            cp -r frontend/public deployment/ 2>/dev/null || true
            cp frontend/package.json deployment/
            cp frontend/package-lock.json deployment/ 2>/dev/null || true
            # Copy node_modules (production ready)
            cd frontend
            npm ci --omit=dev
            cd ..
            cp -r frontend/node_modules deployment/
            # Copy any Next.js config files
            cp frontend/next.config.* deployment/ 2>/dev/null || true
          fi
          
          # Ensure .env files are copied
          cp frontend/.env.production deployment/ 2>/dev/null || true
          cp frontend/.env.local deployment/ 2>/dev/null || true
          
          cd deployment
          zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'expandev-02'
          package: .
          startup-command: 'if [ -f server.js ]; then node server.js; else npm run start; fi'